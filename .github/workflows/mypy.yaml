name: MyPy
on:
  push:
    paths-ignore:
    - 'docs/**'
    - '*.md'
    - Makefile
  pull_request:
    paths-ignore:
    - 'docs/**'
    - '*.md'
    - Makefile
    branches:
      - main

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: 'same_content'
          paths_ignore: '["**/README.md", "**/docs/**", "CHANGELOG.md"]'
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'

  setup_build:
    needs: pre_job
    runs-on: ubuntu-latest
    if: needs.pre_job.outputs.should_skip != 'true'
    outputs:
      python-version: ${{ steps.python-version.outputs.python-version }}
    steps:
      - uses: actions/checkout@master
      - name: Output Python version
        id: python-version
        run: |
          echo "::set-output name=python-version::$(cat .python-version)"
      - uses: actions/setup-python@v2.1.3
        id: setup-python
        with:
          python-version: ${{ steps.python-version.outputs.python-version }}
          architecture: x64
      - name: Set up Poetry cache
        uses: actions/cache@v2
        id: cached-poetry
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-1.1.7a-python-${{ steps.setup-python.outputs.python-version }}
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1.1.8
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        with:
          version: 1.1.7
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Initialize Poetry
        # NOTE: We have to apply the config options to cover cases where the install-poetry action is skipped but we have new deps
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
      - name: Set up dependencies cache
        uses: actions/cache@v2
        id: cached-poetry-dependencies
        with:
          path: .venv
          key: ".venv-${{ runner.os }}-\
            python-${{ steps.setup-python.outputs.python-version }}-\
            ${{ hashFiles('**/poetry.lock') }}"
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      # NOTE: Install our root project into the venv cache without busting it
      - name: Set up root + dependencies cache
        uses: actions/cache@v2
        id: cached-project
        with:
          path: .venv
          key: ".venv-${{ runner.os }}-\
            python-${{ steps.setup-python.outputs.python-version }}-\
            ${{ hashFiles('**/poetry.lock', 'servo/**/*.py') }}"
      - name: Install root project
        # NOTE: Skipping root project install accelerates cases where only tests have changed
        if: steps.cached-project.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

  mypy:
    needs:
      - pre_job
      - setup_build
    if: needs.pre_job.outputs.should_skip != 'true'
    name: Run MyPy
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-python@v2.1.3
      id: setup-python
      with:
        python-version: ${{ needs.setup_build.outputs.python-version }}
        architecture: x64
    - name: Set up root + dependencies cache
      uses: actions/cache@v2
      id: cached-project
      with:
        path: .venv
        key: ".venv-${{ runner.os }}-\
          python-${{ steps.setup-python.outputs.python-version }}-\
          ${{ hashFiles('**/poetry.lock', 'servo/**/*.py') }}"
    - name: Run mypy
      run: |
        source .venv/bin/activate
        # NOTE: We just need to get a report from mypy (not fail at the plethora), so success is forced
        mypy servo/ || true
    - uses: actions/upload-artifact@v2
      with:
        name: mypy-reports
        path: artifacts/
